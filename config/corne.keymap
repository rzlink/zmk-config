/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define QWERTY 0
#define LOWER 1
#define RAISE 2
#define FUNC  3

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {

// .----------------------------------------------------------------.       .-----------------------------------------------------------.
// |   ESC        |    Q    |    W    |    E    |    R    |    T    |       |    Y    |    U    |    I    |    O    |    P    |    |\   |
// |--------------+---------+---------+---------+---------+---------|       |---------+---------+---------+---------+---------+---------|
// |   CTRL/Tab   |    A    |    S    |    D    |    F    |    G    |       |    H    |    J    |    K    |    L    |    :;   |    "'   |
// |--------------+---------+---------+---------+---------+---------|       |---------+---------+---------+---------+---------+---------|
// |   SHFT       |    Z    |    X    |    C    |    V    |    B    |       |    N    |    M    |    <,   |    >.   |    ?/   | ` | ALT |
// '----------------------------------+---------+---------+---------+       |---------+---------+---------+-----------------------------'
//                                    |   GUI   |  LOWER  |   SPC   |       |   ENT   |  RAISE  |  BKSP   |
//                                    '---------+---------+---------'       '---------+---------+---------'
                        bindings = <
   &kp ESC        &kp Q     &kp W     &kp E     &kp R     &kp T             &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BACKSLASH
   &mt LCTRL TAB  &kp A     &kp S     &kp D     &kp F     &kp G             &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp SQT
   &kp LSHFT      &kp Z     &kp X     &kp C     &kp V     &kp B             &kp N     &kp M     &kp COMMA &kp DOT   &kp FSLH  &mt RALT GRAVE
                                      &kp LGUI  &mo LOWER &kp SPACE         &kp RET   &mo RAISE &kp BSPC
                        >;
                };

                lower_layer {

// .----------------------------------------------------------------.       .-----------------------------------------------------------.
// |   ESC        |    1    |    2    |    3    |    4    |    5    |       |    6    |    7    |    8    |    9    |    0    |    `    |
// |--------------+---------+---------+---------+---------+---------|       |---------+---------+---------+---------+---------+---------|
// |              |    !    |    @    |    #    |    $    |    %    |       |    ^    |    &    |    *    |    (    |    )    |    :    |
// |--------------+---------+---------+---------+---------+---------|       |---------+---------+---------+---------+---------+---------|
// |   SHFT       |    ~    |    +    |    -    |    {    |    [    |       |    ]    |    }    |    =    |    _    |         |         |
// '----------------------------------+---------+---------+---------+       |---------+---------+---------+-----------------------------'
//                                    |   GUI   |         |  FUNC   |       |         |         |   ALT   |
//                                    '---------+---------+---------'       '---------+---------+---------'

                        bindings = <
   &kp ESC        &kp N1    &kp N2    &kp N3    &kp N4    &kp N5            &kp N6    &kp N7    &kp N8           &kp N9    &kp N0    &kp GRAVE
   &trans         &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT         &kp CARET &kp AMPS  &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp COLON
   &kp LSHFT      &kp TILDE &kp PLUS  &kp MINUS &kp LBRC  &kp LBKT          &kp RBKT  &kp RBRC  &kp KP_EQUAL     &kp UNDER &trans    &trans
                                      &kp LGUI  &trans    &mo FUNC          &trans    &trans    &kp RALT
                        >;
                };

                raise_layer {
// ------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |  |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |  |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |  |  _  |  +  |  {  |  }  |  |  |  ~   |
//                    | GUI | FUN | SPC |  | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                    	     &kp LGUI &mo FUNC &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };

                function_layer {
// ----------------------------------------------------------------------------------- 
// |       |     |     |     |     |     |  | PRT | LSLCK | BRK  |     |     |       |
// | BTCLR | BT0 | BT1 | BT2 | BT3 |     |  | INS | HOME  | PGUP |     |     |       |
// |       |     |     |     |     |     |  | DEL | END   | PGDN |     |     |       |
//                           |     |     |  |     |       |      |     |
                        bindings = <
   &trans      &trans       &trans       &trans       &trans        &trans           &kp PSCRN   &kp LSLCK  &kp PAUSE_BREAK   &trans    &trans    &trans
   &bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3  &trans           &kp INS     &kp HOME   &kp PG_UP         &trans    &trans    &trans
   &trans      &trans       &trans       &trans       &trans        &trans           &kp DEL     &kp END    &kp PG_DN         &trans    &trans    &trans
                         	         &trans       &trans        &trans           &trans      &trans     &trans
                        >;
                };
        };
};
